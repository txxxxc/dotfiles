[[plugins]]
repo = "skanehira/preview-markdown.vim"

[[plugins]]
repo = "machakann/vim-sandwich"

[[plugins]]
repo = "altercation/vim-colors-solarized"

[[plugins]]
repo = "cespare/vim-toml"

[[plugins]]
repo = "jparise/vim-graphql"

[[plugins]]
repo = "nickeb96/fish.vim"

[[plugins]]
repo = 'junegunn/fzf'
build_on = './install --all'
merged = '0'
hook_add = '''
set rtp+=/usr/local/opt/fzf
set rtp+=/usr/local/bin/fzf
set rtp+=~/.fzf
let $FZF_DEFAULT_COMMAND = 'ag --hidden --ignore .git -l -g ""'
'''

[[plugins]]
repo = 'junegunn/fzf.vim'
dependes = 'fzf'
hook_add = '''
command! -bang -nargs=? -complete=dir Files
  \ call fzf#vim#files(<q-args>, fzf#vim#with_preview({'source': 'ag --hidden --ignore .git -g ""'}), <bang>0)

command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --hidden --column --line-number --no-heading --color=always --smart-case -- '.shellescape(<q-args>), 1,
  \   fzf#vim#with_preview({'options': '--exact --reverse --delimiter : --nth 3..'}), <bang>0)
'''

[[plugins]]
repo = 'yuki-yano/fzf-preview.vim'
rev = 'release/remote'
dependes = ['junegunn/fzf']

[[plugins]]
repo = 'lambdalisue/gina.vim'
dependes = ['yuki-yano/fzf-preview.vim']

[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
marged = 0
hook_add = '''
let g:coc_global_extensions = [
      \ 'coc-actions',
      \ 'coc-docker',
      \ 'coc-diagnostic', 
      \ 'coc-eslint', 
      \ 'coc-emmet', 
      \ 'coc-fish', 
      \ 'coc-fzf-preview', 
      \ 'coc-go', 
      \ 'coc-git', 
      \ 'coc-html', 
      \ 'coc-htmlhint', 
      \ 'coc-highlight',
      \ 'coc-jedi', 
      \ 'coc-json', 
      \ 'coc-lists', 
      \ 'coc-ltex', 
      \ 'coc-markdownlint', 
      \ 'coc-metals', 
      \ 'coc-prettier', 
      \ 'coc-sh',
      \ 'coc-snippets', 
      \ 'coc-sourcekit', 
      \ 'coc-stylelintplus', 
      \ 'coc-stylelint', 
      \ 'coc-tailwindcss', 
      \ 'coc-tslint-plugin', 
      \ 'coc-tsserver', 
      \ 'coc-toml', 
      \ 'coc-ultisnips', 
      \ 'coc-yank', 
      \ 'coc-yaml',
			\ 'coc-sourcekit',
      \ '@yaegassy/coc-volar',
      \ '@yaegassy/coc-volar-tools'
\] 
'''

[[plugins]]
repo = 'cohama/lexima.vim'
hook_add = '''
call lexima#add_rule({'char': '>',
				\ 'at': '<\(\w\+\)\%#>',
				\ 'leave': '>',
				\ 'input_after': '</\1>',
				\ 'with_submatch': 1})
'''

[[plugins]]
repo = 'lambdalisue/fern.vim'
hook_add = '''
let g:fern#default_hidden=1
let g:fern#default_exclude = '^\%(\.git\|\.DS_Store\)$'
function! FernInit() abort
	nmap <buffer> v <Plug>(fern-action-open:side)
	nmap <buffer> K <Plug>(fern-action-new-dir)
	nmap <buffer> ! <Plug>(fern-action-hidden:toggle)
	nmap <buffer> - <Plug>(fern-action-mark:toggle)
	vmap <buffer> - <Plug>(fern-action-mark:toggle)
	nmap <buffer> C <Plug>(fern-action-clipboard-copy)
	nmap <buffer> X <Plug>(fern-action-clipboard-move)
	nmap <buffer> P <Plug>(fern-action-clipboard-paste)
	nmap <buffer> h <Plug>(fern-action-collapse)
	nmap <buffer> c <Plug>(fern-action-copy)
	nmap <buffer> <leader>h <Plug>(fern-action-leave)
	nmap <buffer> m <Plug>(fern-action-move)
	nmap <buffer> N <Plug>(fern-action-new-file)
	nmap <buffer> <cr> <Plug>(fern-action-open-or-enter)
	nmap <buffer> l <Plug>(fern-action-open-or-expand)
	nmap <buffer> s <Plug>(fern-action-open:select)
	nmap <buffer> t <Plug>(fern-action-open:tabedit)
	nmap <buffer> <C-l> <Plug>(fern-action-reload)
	nmap <buffer> r <Plug>(fern-action-rename)
	nmap<buffer> i <Plug>(fern-action-reveal)
	nmap <buffer> D <Plug>(fern-action-trash)
	nmap <buffer> y <Plug>(fern-action-yank)
	nmap <buffer> gr <Plug>(fern-action-grep)
	nmap <buffer> d <Plug>(fern-action-remove)
	nmap <buffer> B <Plug>(fern-action-save-as-bookmark)
	nmap <buffer> cd <Plug>(fern-action-tcd)
	nmap <buffer> <C-h> <C-w>h
	nmap <buffer> <C-l> <C-w>l
endfunction
augroup FernEvents
	autocmd!
	autocmd FileType fern call FernInit()
augroup END
let g:fern#disable_default_mappings = 1
'''

[[plugins]]
repo = 'lambdalisue/nerdfont.vim'

[[plugins]]
repo = 'lambdalisue/fern-renderer-nerdfont.vim'

[[plugins]]
repo = 'lambdalisue/fern-git-status.vim'

[[plugins]]
repo = 'lambdalisue/glyph-palette.vim'

[[plugins]]
repo = 'vim-airline/vim-airline'

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'christoomey/vim-tmux-navigator'

[[plugins]]
repo = 'thinca/vim-quickrun'
# on = 'QuickRun'
hook_add = '''
	set splitright
	let g:quickrun_config = {}
	let g:quickrun_config._ = {
		\ 'outputter/error/success': 'buffer',
		\ 'outputter/error/error': 'quickfix',
		\ 'outputter/quickfix/open_cmd': 'copen',
		\ 'hook/time/enable': 1,
		\ 'runner': 'vimproc',
		\ 'runner/vimproc/updatetime': 60,
		\ }
	let g:quickrun_config.cpp = {
    \ 'command': 'g++',
    \ 'input': 'stdin.txt',
    \ 'runner': 'system',
    \ 'cmdopt': '-std=c++14 -Wall -Wextra --pedantic-error'
    \ }
'''

[[plugins]]
repo = 'Shougo/vimproc.vim'
do = 'make'

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
hook_post_update = 'TSUpdate'

[[plugins]]
repo = 'mattn/emmet-vim'

[[plugins]]
repo = 'tpope/vim-commentary'

[[plugins]]
repo = 'machakann/vim-highlightedyank'
hook_add = '''
	let g:highlightedyank_highlight_duration = 250
'''

[[plugins]]
repo = 'mattn/vim-goimports'

# [[plugins]]
# repo = 'fatih/vim-go'
# hook_add= '''
# 	let g:go_def_mapping_enabled = 0
# 	autocmd FileType go set autowrite 
# 	autocmd FileType go nmap <leader>gr <Plug>(go-run)
# 	autocmd FileType go nmap <leader>t <Plug>(go-test)
# 	autocmd FileType go nmap <Leader>c <Plug>(go-coverage-toggle)
# 	let g:go_metalinter_autosave = 1
# 	" カーソル上のワードに対して:GoInfo実行
# 	let g:go_auto_type_info = 1
# 	" :GoInfo更新時間 Default->800
# 	autocmd FileType go set updatetime=100
# 	" または:GoInfoのキーバインドを設定
# 	" autocmd FileType go nmap <Leader>i <Plug>(go-info)

# 	" 同じIDをカーソルがワードに移動するごとにハイライト Default->0
# 	" let g:go_auto_sameids = 1
# 	" または:GoSameIdsToggleのキーバインドを設定
# 	autocmd FileType go nmap <Leader>s :GoSameIdsToggle<CR>

# 	" :GoPlayでページをブラウザに読み込まない Default->1
# 	let g:go_play_open_browser = 0
# '''

[[plugins]]
repo = 'brooth/far.vim'

[[plugins]]
repo = 'buoto/gotests-vim'

[[plugins]]
repo = 'easymotion/vim-easymotion'

[[plugins]]
repo = 'vim-denops/denops.vim'

[[plugins]]
repo = 'vim-denops/denops-helloworld.vim'

[[plugins]]
repo = 'Shougo/ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-ui-filer'

[[plugins]]
repo = 'Shougo/ddu-source-file'

[[plugins]]
repo = 'Shougo/ddu-kind-file'

[[plugins]]
repo = 'Shougo/ddu-column-filename'

[[plugins]]
repo = 'lambdalisue/gin.vim'

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'rhysd/conflict-marker.vim'
hook_add = '''
" conflict-marker.vim
" disable the default highlight group
let g:conflict_marker_highlight_group = ''

" Include text after begin and end markers
let g:conflict_marker_begin = '^<<<<<<< .*$'
let g:conflict_marker_end   = '^>>>>>>> .*$'

highlight ConflictMarkerBegin guibg=#2f7366
highlight ConflictMarkerOurs guibg=#2e5049
highlight ConflictMarkerTheirs guibg=#344f69
highlight ConflictMarkerEnd guibg=#2f628e
highlight ConflictMarkerCommonAncestorsHunk guibg=#754a81
'''
